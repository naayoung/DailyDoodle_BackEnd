name: Build and Deploy Spring Boot App to AWS # 파이프라인의 이름

# 워크플로 실행 조건
on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - main # main 브랜치 대상 PR 시 실행
  workflow_dispatch: # 수동으로 워크플로를 실행할 수 있도록 설정

# 워크플로 작업 정의
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 리포지토리 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Java 17 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      # 3. 프로젝트 빌드 (Maven)
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4. Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/daily_doodle:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/daily_doodle:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/daily_doodle:be
          docker push ${{ secrets.DOCKER_USERNAME }}/daily_doodle:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/daily_doodle:be

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Manual Approval
        uses: hmarr/auto-approve-action@v2

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ec2-user
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/daily_doodle:${{ github.sha }}
          KEY_PATH: /tmp/deploy_key.pem
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > $KEY_PATH
          chmod 400 $KEY_PATH
            #EC2 서버의 호스트 키를 known_hosts 파일에 추가
            ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
            #SSH로 EC2에 접속하고 배포 작업 수행
            ssh -o StrictHostKeyChecking=yes -i $KEY_PATH $EC2_USER@$EC2_HOST <<EOF

            # 배포 전 docker 설치 확인
            if ! command -v docker &> /dev/null
            then
              echo "Docker could not be found, installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            # Pull the new Docker image
            docker pull $DOCKER_IMAGE
            docker stop app || true
            docker rm app || true
            docker run -d --name app -p 80:80 $DOCKER_IMAGE
            # 배포 후 확인
            curl --fail http://$EC2_HOST:80 || exit 1
          EOF
